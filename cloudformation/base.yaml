AWSTemplateFormatVersion: '2010-09-09'
Description: 'WGA - Base Infrastructure CloudFormation Template'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: The deployment environment

Resources:
  # S3 Buckets
  DeploymentBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'wga-deployment-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment

  OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'wga-outputbucket-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3600
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # SNS Topic for Alerts
  SecurityAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'wga-security-alerts-${Environment}'
      DisplayName: 'WGA Security Alerts'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'wga-user-pool-${Environment}'
      AutoVerifiedAttributes:
        - email
        - phone_number
      MfaConfiguration: OPTIONAL
      UsernameAttributes:
        - email
      SmsConfiguration:
        ExternalId: !Sub 'wga-sms-configuration-${Environment}'
        SnsCallerArn: !GetAtt SNSRole.Arn  # SNS 역할 ARN 필요
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolTags:
        Environment: !Ref Environment
        
  # User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub 'wga-app-client-${Environment}'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/auth/callback'
        - 'http://localhost:5173'
      LogoutURLs:
        - !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/auth'
        - 'http://localhost:5173'
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      PreventUserExistenceErrors: ENABLED

  # User Pool Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub 'wga-auth-${Environment}-${AWS::AccountId}'
      UserPoolId: !Ref UserPool

  # Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub 'wga_identity_pool_${Environment}'
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
      
  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedUserRole.Arn
        unauthenticated: !GetAtt UnauthenticatedUserRole.Arn

  # IAM Role for Authenticated Users
  SNSRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service: cognito-idp.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: CognitoSNSPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sns:publish
              Resource: '*'
  AuthenticatedUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wga-authenticated-user-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Policies:
        - PolicyName: !Sub 'wga-authenticated-user-policy-${Environment}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt OutputBucket.Arn
                  - !Sub '${OutputBucket.Arn}/*'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for Unauthenticated Users
  UnauthenticatedUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'wga-unauthenticated-user-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: !Sub 'wga-unauthenticated-user-policy-${Environment}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Sub '${OutputBucket.Arn}/public/*'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'wga-api-${Environment}'
      Description: 'WGA API Gateway'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment

Outputs:
  DeploymentBucketName:
    Description: Name of the S3 bucket for deployment packages
    Value: !Ref DeploymentBucket
    Export:
      Name: !Sub '${AWS::StackName}-DeploymentBucketName'
  
  OutputBucketName:
    Description: Name of the S3 bucket for output files
    Value: !Ref OutputBucket
    Export:
      Name: !Sub '${AWS::StackName}-OutputBucketName'
  
  SecurityAlertsTopicArn:
    Description: ARN of the security alerts SNS topic
    Value: !Ref SecurityAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-SecurityAlertsTopicArn'
  
  UserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'
  
  UserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'
  
  UserPoolDomain:
    Description: Domain of the Cognito User Pool
    Value: !Sub 'https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolDomain'
  
  IdentityPoolId:
    Description: ID of the Cognito Identity Pool
    Value: !Ref IdentityPool
    Export:
      Name: !Sub '${AWS::StackName}-IdentityPoolId'
  
  ApiGatewayId:
    Description: ID of the API Gateway
    Value: !Ref ApiGateway
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'
  
  ApiGatewayRootResourceId:
    Description: Root Resource ID of the API Gateway
    Value: !GetAtt ApiGateway.RootResourceId
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayRootResourceId'